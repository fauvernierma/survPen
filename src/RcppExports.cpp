// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "survPen_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// multmat
MatrixXd multmat(const Map<MatrixXd> Mat1, const Map<MatrixXd> Mat2);
RcppExport SEXP _survPen_multmat(SEXP Mat1SEXP, SEXP Mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Map<MatrixXd> >::type Mat1(Mat1SEXP);
    Rcpp::traits::input_parameter< const Map<MatrixXd> >::type Mat2(Mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(multmat(Mat1, Mat2));
    return rcpp_result_gen;
END_RCPP
}
// multvec
VectorXd multvec(const Map<MatrixXd> Mat, const Map<VectorXd> vec);
RcppExport SEXP _survPen_multvec(SEXP MatSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Map<MatrixXd> >::type Mat(MatSEXP);
    Rcpp::traits::input_parameter< const Map<VectorXd> >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(multvec(Mat, vec));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_survPen_multmat", (DL_FUNC) &_survPen_multmat, 2},
    {"_survPen_multvec", (DL_FUNC) &_survPen_multvec, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_survPen(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
